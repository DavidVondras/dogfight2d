/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 0.8.5 ] */

/* [wxMaxima: comment start ]
Worksheet initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Aeroplane Equations
   [wxMaxima: title   end   ] */

/* [wxMaxima: section start ]
Hypothetical declarations
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Data
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
-Each vector is defined in global system except those suffixed by "_local"
-Angles units are in radian
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
X : 1$ Y : 2$
vect(x,y) := [x, y]$
gravity : vect(0, 9.81)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Bezier
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Polygone formula definition
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
'(integrate(PolyBezierCoef*(x-xa)*(x-xb),x) + PolyBezierCste);
ev(%)$ 
PolyBezier(x,xa,ya,xb,yb) := ''%;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Solving equation with:
f(xa) = ya
f(xb) = yb
f(0) = cste
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
programmode : true$
globalsolve : true$

solve(
    [PolyBezier(0,xa,ya,xb,yb) = PolyBezierCste,
    PolyBezier(xa,xa,ya,xb,yb) = ya,
    PolyBezier(xb,xa,ya,xb,yb) = yb], 
    [PolyBezierCste, PolyBezierCoef] );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Reformat PolyBezier function and draw a sample function
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
define(PolyBezier(x,xa,ya,xb,yb), PolyBezier(x,xa,ya,xb,yb));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Bezier formula final definition (taken into account range definition)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Bezier(x, xa, ya, xb, yb) :=
if x < xa then ya
else if x > xb then yb
else PolyBezier(x, xa, ya, xb, yb);
wxplot2d(Bezier(x,0,0,10,5), [x,-5,15], [y, -2, 7])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Scalar product operation definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Definition of the 2D scalar product operation
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Scalar_product(v1,v2) := v1[X]*v2[X] + v1[Y]*v2[Y];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Rotatation operation definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Definition of the vector 2D rotation operation
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Rotate(vector, angle) := vect( 
    vector[X]*cos(angle) - vector[Y]*sin(angle), 
    vector[Y]*cos(angle) + vector[X]*sin(angle));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Aerodynamic equations (translation vectors)
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Acceletation definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
a : '(gravity + (F_cx(v0_local[X], rotation0) + F_cz(v0_local[X], v0_local[Y], rotation0) + F_propel(propel_value))/m);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Velocity definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
at t=t0:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
v0 : [v0_X, v0_Y]$
v0_local : vect(
    cos(rotation0)*v0[X],
    sin(rotation0)*v0[Y]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
at t0 + t (considering that t is a small delta):
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
v(t) := v0 + a*t$ 
v(t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
v_local : vect(
    '( cos(rotation0)*v(t)[X] ),
    '( sin(rotation0)*v(t)[Y] ));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Normal velocity
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
v_normal(t) := sqrt( ( v(t)[X] )^2 + ( v(t)[Y] )^2 );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
F_propel Propel force definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
F_propel(propel_value) := propel_max*propel_value;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
F_cx Frictional force definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
F_cx is a frictional force depending on cx coefficient
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
F_cx(v_local_x, rotation) := vect(
    -cos(rotation)*v_local_x*cx,
    sin(rotation)*v_local_x*cx)$
F_cx(v_local_x, rotation);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Definition of cx coefficient
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
cx : cx_cste$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
F_cz Frictional force definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Fz is a frictional force depending on cz coefficient
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
F_cz(v_local_x, v_local_y, rotation) := vect(
    '(-sin(rotation)*v_local_y*cz(v_local_x)),
    '(-cos(rotation)*v_local_y*cz(v_local_x)))$
F_cz(v_local_x, v_local_y, rotation);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Definition of cz coefficient
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
define (cz(v_local_x), PolyBezier(v_local_x, 0, cz_min, v_cz_limite, cz_max));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Aerodynamic equations (momentum vectors)
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Rotation acceleration definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
a_rotation : (M_velocity_i(v_normal) + M_elevator('v0_local['X], elevator_value))/m;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Rotation velocity definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
v_rotation(t) := v_rotation0 + ''a_rotation*t;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Rotation velocity incidence definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Definition of the rotation between airplane rotation angle and velocity orientation
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
rotation_velocity_i : rotation0 + atan2(v['Y], v['X]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
M_velocity_i Momentum velocity incidence definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Definition of the momentum cased by the incidence of the airplane between airplane rotation angle and velocity orientation.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
M_velocity_i(v_normal) := PolyBezier(v_normal, -v_m_velocity_i_limite, -m_velocity_i_coef, v_m_velocity_i_limite, m_velocity_i_coef)$
M_velocity_i(v_normal);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
M_elevator Momentum elevator definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Definition of the momentum caused by elevator action
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
M_elevator(v_local_x, elevator_value) := PolyBezier(v_local_x, 0, 0, v_m_elevator_limite, m_elevator_coef)*elevator_value$
M_elevator(v_local_x, elevator_value);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Collisions equations
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Collision point definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Coordinates of the collision point definition
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
C_point: vect( c_point_x, c_point_y );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Collision reaction force definition in C
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Definition of the reaction force from C collision point.
    -We consider that collision reaction formula is only for landing -> we can consider the x component is null.
    -The aim of this force is to make the resulting velocity = 0. To make this formula faster, this computation is made this way.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Rc : vect( 0, -'v(t)['Y]*m );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Collision reaction force definition in G
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Definition of the reaction force from Gravity center of the airplane
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Rg : vect( 0, Scalar_product(Rc, Rotate(C_point, rotation)) );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Rotation redefinition after collision application
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Momentum of the reaction force is not computed. rotation is processed again in order to put the collision point on collision surface.
The following formula must be processed when Collision reaction forces have been applied to the velocity.
    - C_offset is the distance from C point and the collision surface along Y axe
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
rotation : asin(airplane['Y]/C_offset);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
