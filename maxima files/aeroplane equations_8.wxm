/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 0.8.5 ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: title   start ]
Aeroplane Equations
   [wxMaxima: title   end   ] */

/* [wxMaxima: section start ]
Hypothetical declarations
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
-Each vector is defined in global system except those suffixed by "_local"
-Angles units are in radian
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
X : 1$ Y : 2$
vect(x,y) := [x, y]$
gravity : vect(0, 9.81)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Polygone formula definition
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
'(integrate(PolyBezierCoef*(x-xa)*(x-xb),x) + PolyBezierCste);
ev(%)$ 
PolyBezier(x,xa,ya,xb,yb) := ''%;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Solving equation with:
f(xa) = ya
f(xb) = yb
f(0) = cste
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
programmode : true$
globalsolve : true$

solve(
    [PolyBezier(0,xa,ya,xb,yb) = PolyBezierCste,
    PolyBezier(xa,xa,ya,xb,yb) = ya,
    PolyBezier(xb,xa,ya,xb,yb) = yb], 
    [PolyBezierCste, PolyBezierCoef] );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Reformat PolyBezier function and draw a sample function
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
define(PolyBezier(x,xa,ya,xb,yb), PolyBezier(x,xa,ya,xb,yb));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Bezier formula final definition (taken into account range definition)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Bezier(x, xa, ya, xb, yb) :=
if x < xa then ya
else if x > xb then yb
else PolyBezier(x, xa, ya, xb, yb);
wxplot2d(Bezier(x,0,0,10,5), [x,-5,15], [y, -2, 7])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Aerodynamic equations (translation vectors)
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Acceletation definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
a : '(gravity + (F_cx(v0_local[X], rotation0) + F_cz(v0_local[X], v0_local[Y], rotation0) + F_propel(propel_value))/m);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Velocity definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
at t=t0:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
v0 : [v0_X, v0_Y]$
v0_local : vect(
    cos(rotation0)*v0[X],
    sin(rotation0)*v0[Y]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
at t0 + t (considering that t is a small delta):
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
v(t) := v0 + a*t$ 
v(t);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
v_local : vect(
    '( cos(rotation0)*v(t)[X] ),
    '( sin(rotation0)*v(t)[Y] ));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Normal velocity
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
v_normal(t) := sqrt( ( v(t)[X] )^2 + ( v(t)[Y] )^2 );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
F_propel Propel force definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
F_propel(propel_value) := propel_max*propel_value;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
F_cx Frictional force definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
F_cx is a frictional force depending on cx coefficient
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
F_cx(v_local_x, rotation) := vect(
    -cos(rotation)*v_local_x*cx,
    sin(rotation)*v_local_x*cx)$
F_cx(v_local_x, rotation);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Definition of cx coefficient
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
cx : cx_cste$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
F_cz Frictional force definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Fz is a frictional force depending on cz coefficient
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
F_cz(v_local_x, v_local_y, rotation) := vect(
    '(-sin(rotation)*v_local_y*cz(v_local_x)),
    '(-cos(rotation)*v_local_y*cz(v_local_x)))$
F_cz(v_local_x, v_local_y, rotation);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Definition of cz coefficient
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
define (cz(v_local_x), PolyBezier(v_local_x, 0, cz_min, v_cz_limite, cz_max));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Aerodynamic equations (momentum vectors)
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Rotation acceleration definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
a_rotation : (M_velocity_i + M_elevator)/m;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Rotation velocity definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
v_rotation(t) := v_rotation0 + ''a_rotation*t;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Rotation velocity incidence definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
rotation_velocity_i : rotation0 + atan2(v[Y], v[X]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
M_velocity_i Momentum velocity incidence definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
M_velocity_i : PolyBezier(v_normal, -v_m_velocity_i_limite, -m_velocity_i_coef, v_m_velocity_i_limite, m_velocity_i_coef);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
M_elevator Momentum elevator definition
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
M_elevator : PolyBezier('v_local['X], 0, 0, v_m_elevator_limite, m_elevator_coef);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Collisions equations
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
TODO
   [wxMaxima: comment end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
